// Mobile Navigation Test Suite for Genshinkan Aikido Website
// Generated by: Lance James, Unit 221B
// Date: July 30, 2025

/**
 * Comprehensive mobile testing suite for the enhanced Aikido website
 * Tests navigation, form functionality, and user experience on mobile devices
 */

const mobileTestSuite = {
    // Test Results
    results: {
        navigation: {},
        form: {},
        performance: {},
        usability: {}
    },

    // Test mobile navigation functionality
    async testMobileNavigation() {
        console.log('🔍 Testing Mobile Navigation...');
        
        // Check for mobile menu button
        const mobileMenuButton = document.querySelector('.mobile-menu-toggle, .hamburger, [data-mobile-menu]');
        this.results.navigation.hasMobileMenuButton = !!mobileMenuButton;
        
        // Count navigation items
        const navItems = document.querySelectorAll('nav a, .nav-link, header a');
        this.results.navigation.navItemsCount = navItems.length;
        
        // Test navigation responsiveness
        const nav = document.querySelector('nav, .navigation');
        this.results.navigation.isResponsive = nav ? window.getComputedStyle(nav).display !== 'none' : false;
        
        // Test scroll behavior
        this.results.navigation.smoothScrollSupported = 'scrollBehavior' in document.documentElement.style;
        
        return this.results.navigation;
    },

    // Test form functionality on mobile
    async testMobileForm() {
        console.log('📝 Testing Mobile Form...');
        
        const form = document.querySelector('#intro-class-form');
        if (!form) {
            this.results.form.error = 'Form not found';
            return this.results.form;
        }

        // Test form visibility and accessibility
        this.results.form.isVisible = window.getComputedStyle(form).display !== 'none';
        this.results.form.hasProperLabels = form.querySelectorAll('input[required]').length > 0;
        
        // Test input field responsiveness
        const inputs = form.querySelectorAll('input, select, textarea');
        this.results.form.inputCount = inputs.length;
        this.results.form.allInputsAccessible = Array.from(inputs).every(input => {
            const rect = input.getBoundingClientRect();
            return rect.width > 0 && rect.height > 0;
        });

        // Test form validation
        const requiredFields = form.querySelectorAll('[required]');
        this.results.form.requiredFieldsCount = requiredFields.length;
        this.results.form.hasValidation = form.getAttribute('novalidate') === null;

        // Test submit button
        const submitButton = form.querySelector('button[type="submit"], input[type="submit"]');
        this.results.form.hasSubmitButton = !!submitButton;
        this.results.form.submitButtonAccessible = submitButton ? 
            submitButton.getBoundingClientRect().height >= 44 : false; // iOS minimum touch target

        return this.results.form;
    },

    // Test mobile performance
    async testMobilePerformance() {
        console.log('⚡ Testing Mobile Performance...');
        
        // Test viewport configuration
        const viewport = document.querySelector('meta[name="viewport"]');
        this.results.performance.hasViewportMeta = !!viewport;
        this.results.performance.viewportContent = viewport ? viewport.getAttribute('content') : null;
        
        // Test loading performance
        this.results.performance.domContentLoaded = performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart;
        this.results.performance.windowLoaded = performance.timing.loadEventEnd - performance.timing.navigationStart;
        
        // Test image optimization
        const images = document.querySelectorAll('img');
        this.results.performance.imageCount = images.length;
        this.results.performance.imagesWithAlt = Array.from(images).filter(img => img.alt).length;
        
        // Test touch-friendly design
        const touchTargets = document.querySelectorAll('button, a, input, select');
        this.results.performance.touchTargetsCount = touchTargets.length;
        
        return this.results.performance;
    },

    // Test mobile usability
    async testMobileUsability() {
        console.log('👆 Testing Mobile Usability...');
        
        // Test text readability
        this.results.usability.fontSize = window.getComputedStyle(document.body).fontSize;
        this.results.usability.lineHeight = window.getComputedStyle(document.body).lineHeight;
        
        // Test content width
        this.results.usability.contentWidth = document.body.scrollWidth;
        this.results.usability.viewportWidth = window.innerWidth;
        this.results.usability.hasHorizontalScroll = document.body.scrollWidth > window.innerWidth;
        
        // Test interactive elements
        const buttons = document.querySelectorAll('button');
        const links = document.querySelectorAll('a');
        
        this.results.usability.buttonCount = buttons.length;
        this.results.usability.linkCount = links.length;
        
        // Check for proper spacing
        this.results.usability.hasPadding = parseInt(window.getComputedStyle(document.body).padding) > 0;
        
        return this.results.usability;
    },

    // Run all tests
    async runAllTests() {
        console.log('🚀 Starting Mobile Test Suite...');
        
        await this.testMobileNavigation();
        await this.testMobileForm();
        await this.testMobilePerformance();
        await this.testMobileUsability();
        
        return this.generateReport();
    },

    // Generate comprehensive test report
    generateReport() {
        const report = {
            timestamp: new Date().toISOString(),
            testEnvironment: {
                userAgent: navigator.userAgent,
                viewport: `${window.innerWidth}x${window.innerHeight}`,
                devicePixelRatio: window.devicePixelRatio
            },
            results: this.results,
            summary: this.generateSummary(),
            recommendations: this.generateRecommendations()
        };
        
        console.log('📊 Mobile Test Report Generated', report);
        return report;
    },

    // Generate test summary
    generateSummary() {
        const issues = [];
        const successes = [];
        
        // Navigation analysis
        if (!this.results.navigation.hasMobileMenuButton) {
            issues.push('No mobile menu button detected');
        } else {
            successes.push('Mobile navigation button found');
        }
        
        // Form analysis
        if (!this.results.form.isVisible) {
            issues.push('Form not visible on mobile');
        } else {
            successes.push('Form is visible and accessible');
        }
        
        if (!this.results.form.submitButtonAccessible) {
            issues.push('Submit button may be too small for touch (< 44px height)');
        }
        
        // Performance analysis
        if (!this.results.performance.hasViewportMeta) {
            issues.push('Missing viewport meta tag');
        }
        
        if (this.results.performance.domContentLoaded > 3000) {
            issues.push('Slow DOM content loading (> 3 seconds)');
        }
        
        // Usability analysis
        if (this.results.usability.hasHorizontalScroll) {
            issues.push('Horizontal scrolling detected - content wider than viewport');
        }
        
        return {
            totalIssues: issues.length,
            totalSuccesses: successes.length,
            issues,
            successes,
            overallScore: Math.round((successes.length / (successes.length + issues.length)) * 100)
        };
    },

    // Generate recommendations
    generateRecommendations() {
        const recommendations = [];
        
        if (!this.results.navigation.hasMobileMenuButton) {
            recommendations.push({
                priority: 'high',
                category: 'navigation',
                issue: 'Add mobile hamburger menu',
                solution: 'Implement collapsible mobile navigation menu for better UX'
            });
        }
        
        if (!this.results.form.submitButtonAccessible) {
            recommendations.push({
                priority: 'medium',
                category: 'form',
                issue: 'Increase touch target size',
                solution: 'Ensure all interactive elements are at least 44px in height/width'
            });
        }
        
        if (!this.results.performance.hasViewportMeta) {
            recommendations.push({
                priority: 'high',
                category: 'performance',
                issue: 'Add viewport meta tag',
                solution: 'Add <meta name="viewport" content="width=device-width, initial-scale=1.0"> to <head>'
            });
        }
        
        if (this.results.usability.hasHorizontalScroll) {
            recommendations.push({
                priority: 'high',
                category: 'usability',
                issue: 'Fix horizontal scrolling',
                solution: 'Ensure all content fits within viewport width using responsive design'
            });
        }
        
        return recommendations;
    }
};

// Auto-run tests if in browser environment
if (typeof window !== 'undefined') {
    // Run tests after DOM is loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => mobileTestSuite.runAllTests(), 1000);
        });
    } else {
        setTimeout(() => mobileTestSuite.runAllTests(), 1000);
    }
}

// Export for Node.js environment
if (typeof module !== 'undefined' && module.exports) {
    module.exports = mobileTestSuite;
}

// Manual test execution
// Usage: Run mobileTestSuite.runAllTests() in browser console